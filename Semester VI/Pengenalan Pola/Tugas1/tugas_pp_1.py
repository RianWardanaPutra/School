# -*- coding: utf-8 -*-
"""Tugas_PP_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10cuUTzHZ4KfWE5mYQYGPNkNZ-2D2U-4w
"""

# important
import re
from bs4 import BeautifulSoup
punctuations = "!\"#$%&()*+-./:;<=>?@[\]^_`{|}~\n"

# script sederhana untuk mengambil judul document dari html

def get_title(raw_html: str) -> str:
    regx = re.compile('(?is)<title.*>(.*?)</title>')
    match = re.search(regx, raw_html)
    title = match.group(1) if match else 'No title'
    return title

# fungsi untuk menghapus script block
# html tags belum terhapus dengan fungsi ini

def strip_script(raw_html):
    regx = re.compile('(?is)(^.*)<script[^>]*>(.*)</script>(.*$)')
    regx2 = re.compile('(?is)(^.*)<style[^>]*>(.*)</style>(.*$)')
    content = re.sub(regx, r'\1 \3', raw_html)
    content = re.sub(regx2, r'\1 \3', raw_html)
    return content

# tidak digabung dengan fungsi di atas karena kita tidak membutuhkan kata-kata
# dalam block script, tetapi membutuhkan kata-kata dalam block tag html

def strip_html(raw_html: str) -> str:
  """Strip html tags
  
  fungsi ini menghapus tag html dari teks biasa menggunakan regex
  """
  clean_regx = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')
  clean_text = re.sub(clean_regx, '', raw_html)
  return clean_text

class Stopwords_Remover:
    """Stopwords Remover

    Class ini berfungsi untuk membuat objek untuk menghapus stopwords
    dan mengembalikan teks yang telah dihapus stopwords-nya.
    Params
    ------
    None

    Returns
    -------
    Object -> untuk menghapus stopwords

    Methods
    -------
    get_stopwords: list stopwords yang akan difilter
        Usage: Object.get_stopwords()

    remove: method untuk menghapus stopwords
        Usage: Object.remove(text)
    """

    def __init__(self):
        words = self.get_stopwords()
        self.stopwords = self._stopwords_dictionary(words)

    def _stopwords_dictionary(self, words):
        return dict(zip(words, words))

    def get_stopwords(self):
        """get_stopwords: list stopwords yang akan difilter
        Usage: Object.get_stopwords()
        Params
        ------
        None

        Returns
        -------
        list stopwords yang dipakai (List[str])
        """

        return [
            'a', 'ada', 'adalah', 'adanya', 'adapun', 'agak', 'agaknya', 'agar', 'akan', 'akankah', 'akhir',
            'akhiri', 'akhirnya', 'aku', 'akulah', 'amat', 'amatlah', 'anda', 'andalah', 'antar', 'antara',
            'antaranya', 'apa', 'apaan', 'apabila', 'apakah', 'apalagi', 'apatah', 'arti', 'artinya', 'asal',
            'asalkan', 'atas', 'atau', 'ataukah', 'ataupun', 'awal', 'awalnya', 'b', 'bagai', 'bagaikan',
            'bagaimana', 'bagaimanakah', 'bagaimanapun', 'bagainamakah', 'bagi', 'bagian', 'bahkan', 'bahwa',
            'bahwasannya', 'bahwasanya', 'baik', 'baiklah', 'bakal', 'bakalan', 'balik', 'banyak', 'bapak',
            'baru', 'bawah', 'beberapa', 'begini', 'beginian', 'beginikah', 'beginilah', 'begitu', 'begitukah',
            'begitulah', 'begitupun', 'bekerja', 'belakang', 'belakangan', 'belum', 'belumlah', 'benar',
            'benarkah', 'benarlah', 'berada', 'berakhir', 'berakhirlah', 'berakhirnya', 'berapa', 'berapakah',
            'berapalah', 'berapapun', 'berarti', 'berawal', 'berbagai', 'berdatangan', 'beri', 'berikan',
            'berikut', 'berikutnya', 'berjumlah', 'berkali-kali', 'berkata', 'berkehendak', 'berkeinginan',
            'berkenaan', 'berlainan', 'berlalu', 'berlangsung', 'berlebihan', 'bermacam', 'bermacam-macam',
            'bermaksud', 'bermula', 'bersama', 'bersama-sama', 'bersiap', 'bersiap-siap', 'bertanya',
            'bertanya-tanya', 'berturut', 'berturut-turut', 'bertutur', 'berujar', 'berupa', 'besar',
            'betul', 'betulkah', 'biasa', 'biasanya', 'bila', 'bilakah', 'bisa', 'bisakah', 'boleh', 'bolehkah',
            'bolehlah', 'buat', 'bukan', 'bukankah', 'bukanlah', 'bukannya', 'bulan', 'bung', 'c', 'cara',
            'caranya', 'cukup', 'cukupkah', 'cukuplah', 'cuma', 'd', 'dahulu', 'dalam', 'dan', 'dapat', 'dari',
            'daripada', 'datang', 'dekat', 'demi', 'demikian', 'demikianlah', 'dengan', 'depan', 'di', 'dia',
            'diakhiri', 'diakhirinya', 'dialah', 'diantara', 'diantaranya', 'diberi', 'diberikan', 'diberikannya',
            'dibuat', 'dibuatnya', 'didapat', 'didatangkan', 'digunakan', 'diibaratkan', 'diibaratkannya',
            'diingat', 'diingatkan', 'diinginkan', 'dijawab', 'dijelaskan', 'dijelaskannya', 'dikarenakan',
            'dikatakan', 'dikatakannya', 'dikerjakan', 'diketahui', 'diketahuinya', 'dikira', 'dilakukan',
            'dilalui', 'dilihat', 'dimaksud', 'dimaksudkan', 'dimaksudkannya', 'dimaksudnya', 'diminta',
            'dimintai', 'dimisalkan', 'dimulai', 'dimulailah', 'dimulainya', 'dimungkinkan', 'dini', 'dipastikan',
            'diperbuat', 'diperbuatnya', 'dipergunakan', 'diperkirakan', 'diperlihatkan', 'diperlukan',
            'diperlukannya', 'dipersoalkan', 'dipertanyakan', 'dipunyai', 'diri', 'dirinya', 'disampaikan',
            'disebut', 'disebutkan', 'disebutkannya', 'disini', 'disinilah', 'ditambahkan', 'ditandaskan',
            'ditanya', 'ditanyai', 'ditanyakan', 'ditegaskan', 'ditujukan', 'ditunjuk', 'ditunjuki', 'ditunjukkan',
            'ditunjukkannya', 'ditunjuknya', 'dituturkan', 'dituturkannya', 'diucapkan', 'diucapkannya',
            'diungkapkan', 'dong', 'dua', 'dulu', 'e', 'empat', 'enak', 'enggak', 'enggaknya', 'entah', 'entahlah',
            'f', 'g', 'guna', 'gunakan', 'h', 'hadap', 'hai', 'hal', 'halo', 'hallo', 'hampir', 'hanya', 'hanyalah',
            'hari', 'harus', 'haruslah', 'harusnya', 'helo', 'hello', 'hendak', 'hendaklah', 'hendaknya', 'hingga',
            'i', 'ia', 'ialah', 'ibarat', 'ibaratkan', 'ibaratnya', 'ibu', 'ikut', 'ingat', 'ingat-ingat', 'ingin',
            'inginkah', 'inginkan', 'ini', 'inikah', 'inilah', 'itu', 'itukah', 'itulah', 'j', 'jadi', 'jadilah',
            'jadinya', 'jangan', 'jangankan', 'janganlah', 'jauh', 'jawab', 'jawaban', 'jawabnya', 'jelas',
            'jelaskan', 'jelaslah', 'jelasnya', 'jika', 'jikalau', 'juga', 'jumlah', 'jumlahnya', 'justru',
            'k', 'kadar', 'kala', 'kalau', 'kalaulah', 'kalaupun', 'kali', 'kalian', 'kami', 'kamilah', 'kamu',
            'kamulah', 'kan', 'kapan', 'kapankah', 'kapanpun', 'karena', 'karenanya', 'kasus', 'kata', 'katakan',
            'katakanlah', 'katanya', 'ke', 'keadaan', 'kebetulan', 'kecil', 'kedua', 'keduanya', 'keinginan',
            'kelamaan', 'kelihatan', 'kelihatannya', 'kelima', 'keluar', 'kembali', 'kemudian', 'kemungkinan',
            'kemungkinannya', 'kena', 'kenapa', 'kepada', 'kepadanya', 'kerja', 'kesampaian', 'keseluruhan',
            'keseluruhannya', 'keterlaluan', 'ketika', 'khusus', 'khususnya', 'kini', 'kinilah', 'kira',
            'kira-kira', 'kiranya', 'kita', 'kitalah', 'kok', 'kurang', 'l', 'lagi', 'lagian', 'lah', 'lain',
            'lainnya', 'laku', 'lalu', 'lama', 'lamanya', 'langsung', 'lanjut', 'lanjutnya', 'lebih', 'lewat',
            'lihat', 'lima', 'luar', 'm', 'macam', 'maka', 'makanya', 'makin', 'maksud', 'malah', 'malahan',
            'mampu', 'mampukah', 'mana', 'manakala', 'manalagi', 'masa', 'masalah', 'masalahnya', 'masih',
            'masihkah', 'masing', 'masing-masing', 'masuk', 'mata', 'mau', 'maupun', 'melainkan', 'melakukan',
            'melalui', 'melihat', 'melihatnya', 'memang', 'memastikan', 'memberi', 'memberikan', 'membuat',
            'memerlukan', 'memihak', 'meminta', 'memintakan', 'memisalkan', 'memperbuat', 'mempergunakan',
            'memperkirakan', 'memperlihatkan', 'mempersiapkan', 'mempersoalkan', 'mempertanyakan', 'mempunyai',
            'memulai', 'memungkinkan', 'menaiki', 'menambahkan', 'menandaskan', 'menanti', 'menanti-nanti',
            'menantikan', 'menanya', 'menanyai', 'menanyakan', 'mendapat', 'mendapatkan', 'mendatang', 'mendatangi',
            'mendatangkan', 'menegaskan', 'mengakhiri', 'mengapa', 'mengatakan', 'mengatakannya', 'mengenai',
            'mengerjakan', 'mengetahui', 'menggunakan', 'menghendaki', 'mengibaratkan', 'mengibaratkannya',
            'mengingat', 'mengingatkan', 'menginginkan', 'mengira', 'mengucapkan', 'mengucapkannya', 'mengungkapkan',
            'menjadi', 'menjawab', 'menjelaskan', 'menuju', 'menunjuk', 'menunjuki', 'menunjukkan', 'menunjuknya',
            'menurut', 'menuturkan', 'menyampaikan', 'menyangkut', 'menyatakan', 'menyebutkan', 'menyeluruh',
            'menyiapkan', 'merasa', 'mereka', 'merekalah', 'merupakan', 'meski', 'meskipun', 'meyakini', 'meyakinkan',
            'minta', 'mirip', 'misal', 'misalkan', 'misalnya', 'mohon', 'mula', 'mulai', 'mulailah', 'mulanya', 'mungkin',
            'mungkinkah', 'n', 'nah', 'naik', 'namun', 'nanti', 'nantinya', 'nya', 'nyaris', 'nyata', 'nyatanya',
            'o', 'oleh', 'olehnya', 'orang', 'p', 'pada', 'padahal', 'padanya', 'pak', 'paling', 'panjang', 'pantas',
            'para', 'pasti', 'pastilah', 'penting', 'pentingnya', 'per', 'percuma', 'perlu', 'perlukah', 'perlunya',
            'pernah', 'persoalan', 'pertama', 'pertama-tama', 'pertanyaan', 'pertanyakan', 'pihak', 'pihaknya',
            'pukul', 'pula', 'pun', 'punya', 'q', 'r', 'rasa', 'rasanya', 'rupa', 'rupanya', 's', 'saat', 'saatnya', 'saja',
            'sajalah', 'salam', 'saling', 'sama', 'sama-sama', 'sambil', 'sampai', 'sampai-sampai', 'sampaikan', 'sana',
            'sangat', 'sangatlah', 'sangkut', 'satu', 'saya', 'sayalah', 'se', 'sebab', 'sebabnya', 'sebagai',
            'sebagaimana', 'sebagainya', 'sebagian', 'sebaik', 'sebaik-baiknya', 'sebaiknya', 'sebaliknya',
            'sebanyak', 'sebegini', 'sebegitu', 'sebelum', 'sebelumnya', 'sebenarnya', 'seberapa', 'sebesar',
            'sebetulnya', 'sebisanya', 'sebuah', 'sebut', 'sebutlah', 'sebutnya', 'secara', 'secukupnya', 'sedang',
            'sedangkan', 'sedemikian', 'sedikit', 'sedikitnya', 'seenaknya', 'segala', 'segalanya', 'segera',
            'seharusnya', 'sehingga', 'seingat', 'sejak', 'sejauh', 'sejenak', 'sejumlah', 'sekadar', 'sekadarnya',
            'sekali', 'sekali-kali', 'sekalian', 'sekaligus', 'sekalipun', 'sekarang', 'sekaranglah', 'sekecil',
            'seketika', 'sekiranya', 'sekitar', 'sekitarnya', 'sekurang-kurangnya', 'sekurangnya', 'sela', 'selain',
            'selaku', 'selalu', 'selama', 'selama-lamanya', 'selamanya', 'selanjutnya', 'seluruh', 'seluruhnya',
            'semacam', 'semakin', 'semampu', 'semampunya', 'semasa', 'semasih', 'semata', 'semata-mata', 'semaunya',
            'sementara', 'semisal', 'semisalnya', 'sempat', 'semua', 'semuanya', 'semula', 'sendiri', 'sendirian',
            'sendirinya', 'seolah', 'seolah-olah', 'seorang', 'sepanjang', 'sepantasnya', 'sepantasnyalah',
            'seperlunya', 'seperti', 'sepertinya', 'sepihak', 'sering', 'seringnya', 'serta', 'serupa', 'sesaat',
            'sesama', 'sesampai', 'sesegera', 'sesekali', 'seseorang', 'sesuatu', 'sesuatunya', 'sesudah',
            'sesudahnya', 'setelah', 'setempat', 'setengah', 'seterusnya', 'setiap', 'setiba', 'setibanya',
            'setidak-tidaknya', 'setidaknya', 'setinggi', 'seusai', 'sewaktu', 'siap', 'siapa', 'siapakah',
            'siapapun', 'sini', 'sinilah', 'soal', 'soalnya', 'suatu', 'sudah', 'sudahkah', 'sudahlah', 'supaya',
            't', 'tadi', 'tadinya', 'tahu', 'tak', 'tambah', 'tambahnya', 'tampak', 'tampaknya', 'tandas', 'tandasnya',
            'tanpa', 'tanya', 'tanyakan', 'tanyanya', 'tapi', 'tegas', 'tegasnya', 'telah', 'tempat', 'tentang', 'tentu',
            'tentulah', 'tentunya', 'tepat', 'terakhir', 'terasa', 'terbanyak', 'terdahulu', 'terdapat', 'terdiri',
            'terhadap', 'terhadapnya', 'teringat', 'teringat-ingat', 'terjadi', 'terjadilah', 'terjadinya', 'terkira',
            'terlalu', 'terlebih', 'terlihat', 'termasuk', 'ternyata', 'tersampaikan', 'tersebut', 'tersebutlah',
            'tertentu', 'tertuju', 'terus', 'terutama', 'tetap', 'tetapi', 'tiap', 'tiba', 'tiba-tiba', 'tidak',
            'tidakkah', 'tidaklah', 'tiga', 'toh', 'tuju', 'tunjuk', 'turut', 'tutur', 'tuturnya', 'u', 'ucap', 'ucapnya',
            'ujar', 'ujarnya', 'umumnya', 'ungkap', 'ungkapnya', 'untuk', 'usah', 'usai', 'v', 'w', 'waduh', 'wah', 'wahai',
            'waktunya', 'walau', 'walaupun', 'wong', 'x', 'y', 'ya', 'yaitu', 'yakin', 'yakni', 'yang', 'z'
        ]

    def remove(self, text):
        """remove: method untuk menghapus stopwords
        Usage: Object.remove(text)
        Params
        ------
        text: String -> teks yang akan dihapus stopwords-nya

        Returns
        -------
        filtered_words: String -> hasil teks yang telah dihilangkan stopwords-nya
        """

        raw_text = text.split()
        filtered_words = [
            word for word in raw_text if word not in self.stopwords]
        return ' '.join(filtered_words)

# menghapus tanda baca dari teks

def remove_punctuations(text: str) -> str:
  for symbol in punctuations:
    text = text.replace(symbol, ' ')
  text = ' '.join([x for x in text.split()])
  return text

# dipakai sebagai dictionary dalam class stemmer

kata_ai = [
    'abai', 'acai', 'adai', 'badai', 'aderai', 'aduhai', 'agai', 'agungrai', 'ajai',
    'alai', 'belai', 'altai', 'amahai', 'amai', 'ambai', 'ampai', 'amunsai', 'amuntai',
    'anai', 'anaksungai', 'ancai', 'andai', 'anggai', 'ao dai', 'aodai', 'arai', 'arombai',
    'asai', 'awai', 'bagai', 'bai', 'balai', 'bangai', 'banggai', 'bangkai', 'bangsai',
    'bantai', 'banzai', 'barai', 'barongsai', 'batai', 'batang anai', 'baterai', 'belalai',
    'belantai', 'belu-belai', 'bengkalai', 'benyai', 'ramai', 'randai', 'rangkai', 'rantai',
    'desai', 'jumbai', 'lalai', 'pandai', 'santai', 'setai', 'tatai', 'rumbai', 'untai',
    'bidai', 'bilai', 'bingkai', 'binjai', 'birai', 'bisai', 'bizurai', 'bombai', 'bonai',
    'bonglai', 'bonsai', 'buai', 'bulai', 'bulalai', 'bungarampai', 'bunglai', 'bunjai',
    'burai', 'busai', 'cabai', 'cadai', 'mencadai', 'cai', 'canai', 'candai', 'canggai',
    'capai', 'capcai', 'cemperai', 'cenduai', 'cengkurai', 'cerai', 'ceratai', 'ceremai',
    'cermai', 'cerpelai', 'cetai', 'chiangmai', 'cindai', 'cipai', 'ciremai', 'cuai',
    'cukai', 'cupai', 'curai', 'cutbrai', 'dacai', 'dai', 'damai', 'dawai', 'dembai',
    'denai', 'departementai', 'derai', 'disigai', 'drai', 'duai', 'dubai', 'duhai', 'dumai',
    'embuai', 'enjelai', 'erai', 'esai', 'essai', 'etai', 'fai', 'gabai', 'gadai', 'gagai',
    'gai', 'galai', 'gapai', 'menggapai', 'garai', 'gawai', 'gelamai', 'gelembai', 'gemelai',
    'gemulai', 'geragai', 'gerai', 'gerapai', 'gontai', 'gulai', 'gulambai', 'gunjai',
    'guntai', 'habotai', 'hai', 'lai', 'halai', 'handai', 'hantai', 'hasai', 'hawai',
    'hayai', 'helai', 'honai', 'hudai', 'hyundai', 'ilai', 'inai', 'indai', 'inkai',
    'intai', 'jamiroquai', 'jebai', 'jelai', 'jerabai', 'jerambai', 'jerumbai', 'jujai',
    'julai', 'jundai', 'juntai', 'jurai', 'kai', 'kajai', 'kalai', 'mengalai', 'kansai',
    'kapai', 'kasai', 'katai', 'kedai', 'kedangkai', 'kedekai', 'kedelai', 'kejai', 'kelai',
    'kelambai', 'sikelambai', 'kelarai', 'keledai', 'kelembuai', 'kelempai', 'kelepai',
    'keluai', 'kempetai', 'kenidai', 'kenpetai', 'kepai', 'kerai', 'kerangkai', 'kerawai',
    'kerepai', 'kernai', 'mengernai', 'kerpai', 'kersai', 'ketai', 'kiai', 'kijai', 'kilai',
    'kirai', 'kisai', 'mengisai', 'kiyai', 'komersiai', 'kotai', 'kpai', 'krai', 'kuai',
    'kucai', 'mengucai', 'kudai', 'kukai', 'kulai', 'kulapai', 'kumai', 'kumpai', 'kunai',
    'kundai', 'kurai', 'kutai', 'kyai', 'lambai', 'lamdukpai', 'lampai', 'landai', 'langgai',
    'langkai', 'langlai', 'langsai', 'lanjai', 'lansai', 'lantai', 'larai', 'lawai', 'lebai',
    'lelai', 'lembahanai', 'lembai', 'lempenai', 'lengai', 'lengkai', 'lenyai', 'lepai', 'lerai',
    'letai', 'letah-letai', 'licurai', 'lihai', 'limbai', 'lipai', 'lolai', 'lontai', 'lulai',
    'luncai', 'lunglai', 'lunyai', 'lutilenyai', 'mahaligai', 'mahligai', 'mai', 'malai', 'malai',
    'maligai', 'mamai', 'mampai', 'manai', 'mandai', 'manggarai', 'mangsai', 'marapulai', 'masai',
    'maskapai', 'materai', 'mawai', 'renyai', 'metai', 'meterai', 'mikrountai', 'misai', 'moai',
    'monolinguai', 'morotai', 'muai', 'muaythai', 'mulai', 'mumbai', 'murai', 'ngarai', 'ngurahrai',
    'nilai', 'njai', 'nyai', 'nyarai', 'nyenyai', 'pacai', 'pai', 'pakai', 'palai', 'panai',
    'pangkai', 'paniai', 'pantai', 'partai', 'pasai', 'pawai', 'pecai', 'perai', 'perai',
    'perisai', 'permai', 'pesai', 'petai', 'petsai', 'piawai', 'pindai', 'pingai', 'pirai',
    'poksai', 'puadai', 'pulai', 'punai', 'punggai', 'purai', 'radai', 'meradai', 'rai',
    'rambai', 'rampai', 'ranai', 'merandai', 'rangai', 'merangai', 'rapai', 'merapai', 'rarai',
    'merarai', 'rasai', 'merasai', 'rawai', 'relai', 'merelai', 'remai', 'rembunai', 'rempenai',
    'remunggai', 'renai', 'renai', 'renyai', 'rigai', 'rinai', 'merinai', 'ringkai', 'rinnai',
    'rinyai', 'ripai', 'rombebai', 'ruai', 'rubai', 'runtai', 'seruntai', 'runyai', 'sadai',
    'sagai', 'sai', 'sakai', 'salai', 'sampai', 'samurai', 'sangai', 'sangrai', 'sanjai',
    'sansai', 'sapai', 'satai', 'sawai', 'sebagai', 'sebai', 'sedawai', 'sehelai', 'selai',
    'selampai', 'selesai', 'semai', 'semampai', 'semarai', 'seminai', 'sempalai', 'senarai',
    'senigai', 'sensai', 'sepai', 'seprai', 'serabai', 'serai', 'serawai', 'serindai',
    'serkai', 'serunai', 'sesampai', 'sesuai', 'setangkai', 'shanghai', 'sidai', 'sigai',
    'sijundai', 'sikai', 'simbai', 'simpai', 'sinai', 'siomai', 'sipai', 'slai', 'olai',
    'sondai', 'sorak-sorai', 'suai', 'sungai', 'sungkai', 'supai', 'suplai', 'surai', 'survai',
    'talai', 'tanai', 'tanggai', 'tangkai', 'tapai', 'tasai', 'telangkai', 'tembikai', 'tempilai',
    'tempunai', 'tenggadai', 'umbai', 'thai', 'tikai', 'tirai', 'mirai', 'tokai', 'tuai',
    'tukai', 'menukai', 'tunai', 'tungganai', 'tungkai', 'tupai', 'udai', 'ungkai', 'urai',
    'usai', 'wahai', 'wai', 'wizurai', 'yahrai', 'zai', 'zumbai']

kata_ai = dict(zip(kata_ai, kata_ai))

kata_dasar_k = [
    'kerja', 'kabar', 'kurang', 'kendara', 'kecil', 'kali', 'kempis', 'kiri', 
    'kandang', 'kembang', 'kutip', 'kukus', 'kuning', 'kirim', 'kasihan', 'kendali',
    'kejar', 'kelompok', 'kuat'
]

kata_dasar_k = dict(zip(kata_dasar_k, kata_dasar_k))

# harus menjalankan cell di atas karena terdapat konstan
# yang dipakai untuk kelancaran (konstan kamus)
"""
Implementasi Porter Stemmer untuk Bahasa Indonesia diadaptasi dari
https://snowballstem.org/algorithms/indonesian/stemmer.html
dan https://eprints.illc.uva.nl/740/1/MoL-2003-02.text.pdf
Algoritma stemming adalah:
    1. Hapus partikel
    2. Hapus imbuhan kepemilikan
    3. Hapus 1st order _prefix
    if [3] fails:
        4a. Hapus 2nd order _prefix
        5a. Hapus suffix
        6a. End, return stem
    else:
        4b. Hapus suffix
            if [4b] fails:
                5c. End, return stem
        5b. Hapus 2nd order _prefix
        6b. End, return stem
"""

class PorterStyleStemmer:
    def __init__(self):
        """
        Papernya memaparkan penghitungan integer _measure untuk menghitung
        jumlah vokal (aiueo). Dihitung pada kata awal, kemudian dihitung
        kembali sejalan dengan pengurangan imbuhan."""

        self._buffer = ''

        """
        Kode angka untuk jenis _prefix yang dihapus:

        0: tidak ada/tidak termasuk daftar ini
        1: 'di' atau 'meng' atau 'ter'
        2: 'per'
        3: 'ke' atau 'peng'
        4: 'ber'

        di antara bentuk-bentuk di atas, terdapat varian lain seperti
        'meng' termasuk 'men', 'me', 'meny', 'mem'.
        """

        self._prefix = 0

        self._suffix_dihapus = False

        # bentuk kata benda dengan menggunakan ke-an
        self._bentuk_kb_ke = False

    def _hapus_partikel(self):
        # method yang menghapus partikel seru seperti pada 'pakailah' atau 'benarkah'

        kata = self._buffer
        self._buffer = re.sub(r'(lah|kah|pun)$', '', self._buffer)
        if kata != self._buffer:
            self._measure -= 1

    def _hapus_kepemilikan(self):
        kata = self._buffer
        self._buffer = re.sub(r'(ku|mu|nya)$', '', self._buffer)
        if kata != self._buffer:
            self._measure -= 1

    def _cek_suffix_kan(self):
        """Pengecekan suffix kan

        Method ini mengecek apakah suatu kata dengan akhiran kan jika dipotong
        akan menghasilkan kata dasar yang valid atau tidak. Misal
        peledakan tidak menjadi leda tetapi ledak.

        Jika kata memiliki _prefix 'ke', 'peng', 'per', maka kata tidak mungkin
        memiliki suffix 'kan', artinya kan adalah bagian dari kata dasar.
        Penjelasan lebih lengkap terdapat pada link algoritma snowball.

        Returns
        -------
        True jika _prefix tidak dalam {ke, peng, per}
        """

        return self._prefix != 3 and self._prefix != 2

    def _cek_suffix_an(self):
        """Pengecekan suffix an

        Apabila kata memiliki _prefix 'di', 'meng', 'ter', maka kata tidak
        mungkin memiliki suffix 'an', sehingga method ini mengecek apakah
        kata memiliki _prefix 'di', 'meng', 'ter', jika true maka 'an' pada
        kata adalah suffix.

        Returns
        -------
        True kata tidak mengandung {di, meng, ter}
        """

        return self._prefix != 1

    def _cek_suffix_i(self):
        """Pengecekan suffix 'i' (tidak dalam {ke, peng, ber})

        Dalam Bahasa Indonesia, terdapat imbuhan 'i' seperti 'digurui',
        'menggurui', 'mengamini' dan lain sebagainya. Namun untuk menghapus
        imbuhan 'i' perlu diperhatikan kata-kata serapan dari bahasa asing 
        seperti 'televisi', 'komunikasi', 'atensi', dan lainnya. Maka dari
        itu, dalam method ini dilakukan pengecekan apakah kata berakhiran
        '-si' atau tidak untuk mencegah kata serapan tersebut terpotong.
        Namun perlu diperhatikan bahwa method ini tidak bisa mengenali kata
        dasar yang menggunakan akhiran 2 huruf vokal *i misal '-ai' seperti
        pada 'pantai', 'santai', 'bangkai'. Hal ini yang merupakan salah satu
        kelemahan algoritma ini, menyebabkan kata-kata tersebut akan terpotong.
        Akan tetapi kata yang berakhiran 2 huruf vokal tersebut lebih sedikit
        daripada kata yang dapat diimbuhi 'i', sehingga untuk menambah 
        keefektifan dapat ditambah pengecekan wordlist.

        Returns
        -------
        True jika kata tidak berakhiran 'si' dan _prefix != {ke, peng, ber}
        """

        return self._prefix <= 2 and \
            not self._buffer.endswith('si')

    def _hapus_suffix(self):
        """Hapus suffix 'kan' 'an' 'i'

        Proses penghapusan imbuhan -kan, -an, -i.
        penghapusan hanya dilakukan sekali pada tiap kata yang diproses
        """

        if self._buffer.endswith('kan') and \
                self._cek_suffix_kan():
            self._buffer = self._buffer[:-3]
            self._measure -= 1
            self._suffix_dihapus = True
            return

        if self._buffer.endswith('an') and \
                self._cek_suffix_an():
            self._buffer = self._buffer[:-2]
            self._measure -= 1
            self._suffix_dihapus = True
            return

        if self._buffer.endswith('i') and \
                self._cek_suffix_i() and \
                self._buffer not in kata_ai:
            self._buffer = self._buffer[:-1]
            self._measure -= 1
            self._suffix_dihapus = True
        elif self._buffer.endswith('i') and self._buffer in kata_ai:
            self._suffix_dihapus = True
            pass

    def _hapus_suffix_meng(self, kata):
        """Hapus suffix 'kan' 'an' 'i'

        Method ini berbeda dengan method di atas karena method ini mengambil parameter 
        dan tidak ditujukan untuk mengubah self._buffer
        """

        original = kata
        if kata.endswith('kan') and \
                self._cek_suffix_kan():
            kata = kata[:-3]
            self._measure -= 1
            # self._suffix_dihapus = True
            return kata

        if kata.endswith('an') and \
                self._cek_suffix_an():
            kata = kata[:-2]
            self._measure -= 1
            # self._suffix_dihapus = True
            return kata

        if kata.endswith('i') and \
                self._cek_suffix_i() and \
                kata not in kata_ai:
            kata = kata[:-1]
            self._measure -= 1
            # self._suffix_dihapus = True
            return kata
        elif kata.endswith('i') and kata in kata_ai:
            # self._suffix_dihapus = True
            pass

        return original

    def _prefix_1(self):
        self._prefix = 1
        self._measure -= 1
        return ''

    def _prefix_2(self):
        self._prefix = 2
        self._measure -= 1
        return ''

    def _prefix_3(self):
        self._prefix = 3
        self._measure -= 1
        return ''

    def _hapus_prefix_first_order(self):

        # di meng me men ter
        if re.match(r'^(di|ter)', self._buffer):
            self._buffer = re.sub(r'^(di|ter)',
                                  self._prefix_1(), self._buffer)
            return True
        if re.match(r'^meng[aiueo]', self._buffer):
            temporary = re.sub(r'^meng([aiueo])', r'k\1', self._buffer)
            temporary = self._hapus_suffix_meng(temporary)
            if temporary in kata_dasar_k:
                self._buffer = temporary
            else:
                self._buffer = temporary[1:]
            self._prefix = 1
            return True

        if re.match(r'^meng[^aiueo]', self._buffer):
            self._buffer = re.sub(r'^meng', self._prefix_1(), self._buffer)
            return True

        if re.match(r'^men[aiueo]', self._buffer):
            self._buffer = re.sub(
                r'^men([aiueo])', r't\1' + self._prefix_1(), self._buffer)
            return True

        if re.match(r'^men[^aiueoyg]', self._buffer):
            self._buffer = re.sub(r'^men', self._prefix_1(), self._buffer)
            return True

        if re.match(r'^me[^aiueomn]', self._buffer):
            self._buffer = re.sub(r'^me', self._prefix_1(), self._buffer)
            return True

        # ke peng pen (konsonan)
        if re.match(r'^ke', self._buffer):
            self._buffer = re.sub(r'^ke', self._prefix_3(), self._buffer)
            self._bentuk_kb_ke = True
            return True

        if re.match(r'^(peng|pen)[^aiueoy]', self._buffer):
            self._buffer = re.sub(
                r'^(peng|pen)([^aiueo]{1})', r'\2' + self._prefix_3(), self._buffer)
            return True

        # quick fix untuk kata-kata yang sesuai pola (pen(t)erima, peng(k)eriting)
        if re.match(r'(peng|pen)[aiueo]', self._buffer):
            if self._buffer.startswith('peng'):
                self._buffer = re.sub(
                    r'^peng([aiueo])', r'k\1' + self._prefix_3(), self._buffer)
            else:
                self._buffer = re.sub(
                    r'^pen([aiueo])', r't\1' + self._prefix_3(), self._buffer)
            return True

        # meny dan peny
        if re.match(r'^(meny|peny)[aiueo]', self._buffer):
            if self._buffer.startswith('meny'):
                self._buffer = re.sub(
                    r'^meny([aiueo])', r's\1' + self._prefix_1(), self._buffer)
            else:
                self._buffer = re.sub(
                    r'^peny([aiueo])', r's\1' + self._prefix_3(), self._buffer)
            return True

        # mem dan pem (konsonan)
        if re.match(r'^(mem|pem)[^aiueo]', self._buffer):
            if self._buffer.startswith('mem'):
                self._buffer = re.sub(
                    r'^mem([^aiueo])', r'\1' + self._prefix_1(), self._buffer)
            else:
                self._buffer = re.sub(
                    r'^pem([^aiueo])', r'\1' + self._prefix_3(), self._buffer)
            return True

        # mem dan pem (vokal)
        if re.match(r'^(mem|pem)[aiueo]', self._buffer):
            if self._buffer.startswith('mem'):
                self._buffer = re.sub(
                    r'^mem([aiueo])', r'p\1' + self._prefix_1(), self._buffer)
            else:
                self._buffer = re.sub(
                    r'^pem([aiueo])', r'p\1' + self._prefix_3(), self._buffer)
            return True

        return False

    def _hapus_prefix_second_order(self):
        if re.match(r'^pelajar', self._buffer):
            self._buffer = 'ajar'
            self._prefix = 2
            self._measure = 2
            return True

        if self._buffer == 'belajar':
            self._buffer = 'ajar'
            self._prefix = 4
            self._measure = 2
            return True

        if re.match(r'^(per|pe)[^aiueon]', self._buffer):
            self._buffer = re.sub(r'^(per|pe)', '', self._buffer)
            self._prefix = 2
            self._measure -= 1
            return True

        if self._buffer.startswith('ber'):
            self._buffer = re.sub(r'^ber', '', self._buffer)
            self._prefix = 4
            self._measure -= 1
            return True

        if re.match(r'^be[^aiueo]{1}(er)', self._buffer):
            self._buffer = re.sub(r'^be([^aiueo](er))', r'\1', self._buffer)
            self._prefix = 4
            self._measure -= 1
            return True

        return False

    def stem(self, kata):
        self._buffer = kata

        # entah mengapa _prefix harus diinisiasikan ulang
        self._prefix = 0
        self._measure = len(re.findall(r'[^aiueo]*[aiueo]', self._buffer))
        if self._measure > 2:
            self._hapus_partikel()
            if self._measure > 2:
                self._hapus_kepemilikan()

        kata_asal = self._buffer
        if self._measure > 2:
            berubah = self._hapus_prefix_first_order()
            if self._bentuk_kb_ke:
                berubah = self._hapus_prefix_first_order()
                self._prefix = 3
            if self._measure > 2:
                self._hapus_suffix()
                if not berubah and self._measure > 2:
                    self._hapus_prefix_second_order()
        if self._buffer == kata_asal:
            self._hapus_prefix_second_order()
            if self._measure > 2:
                if not self._suffix_dihapus:
                    self._hapus_suffix()
        return self._buffer

# contoh pemakaian
stemmer = PorterStyleStemmer()
print(stemmer.stem('menghentikan'))

print(stemmer.stem('percaya'))

print(stemmer.stem('melanjutkan'))

def remove_numbers(bow: list) -> list:
    new_list = []
    for word in bow:
        if word.isalpha():
            new_list.append(word)
    return new_list

def text_preprocessing(raw_html: str) -> dict:
    raw_html = raw_html.lower()
    title = get_title(raw_html)
    soup = BeautifulSoup(raw_html, 'html.parser')
    for script in soup(['script', 'style']):
      script.decompose()
    docs = soup.get_text()
    # docs = strip_script(raw_html)
    # docs = strip_html(docs)
    stopwords = Stopwords_Remover()
    docs = stopwords.remove(docs)
    docs = remove_punctuations(docs)
    bag_of_words = docs.split()
    stemmer = PorterStyleStemmer()
    stemmed_bow = []
    for word in bag_of_words:
        res = stemmer.stem(word)
        stemmed_bow.append(res)
    document = {}
    stemmed_bow = remove_numbers(stemmed_bow)
    document[title] = stemmed_bow
    return document

# penghitungan term frequency

def term_frequency(word_dict: dict, bow: list) -> dict:
    tf_dict = {}
    bow_count = len(bow)
    for word, count in word_dict.items():
        tf_dict[word] = count / float(bow_count)
    return tf_dict

def computeIDF(documents: list) -> dict:
    """IDF = N / df(w)
    dengan:
    N = jumlah documents
    df(w) = jumlah documents mengandung kata (w) dalam corpus

    params
    ------
    corpus: list documents yang dijadikan satu

    returns
    -------
    idf_dict: dictionary berisi bobot idf sebuah kata dalam corpus
    """

    import math
    N = len(documents)
    
    idfDict = dict.fromkeys(documents[0].keys(), 0)
    for document in documents:
        for word, val in document.items():
            if val > 0:
                idfDict[word] += 1
    
    for word, val in idfDict.items():
        idfDict[word] = math.log(N / float(val))
    return idfDict

def computeTFIDF(tfBagOfWords, idfs):
    tfidf = {}
    for word, val in tfBagOfWords.items():
        tfidf[word] = val * idfs[word]
    return tfidf

text = '''
    <title>WHO Peringatkan, Pandemi Covid-19 Kemungkinan Besar Bakal Jadi Endemik</title>
    KOMPAS.com - Pada akhir tahun 2020, pakar Organisasi Kesehatan Dunia ( WHO) mengatakan bahwa, pandemi Covid-19 ini bisa menjadi endemik. WHO menyatakan, meski pandemi virus corona yang kita hadapi saat ini sangat parah, fenomena ini belum tentu yang besar. Oleh sebab itu, WHO mengingatkan agar dunia bisa belajar untuk hidup berdampingan dengan Covid-19. 
    "Virus (corona) ditakdirkan akan menjadi endemik. Bahkan saat vaksin mulai diluncurkan," kata Profesor David Heymann, ketua kelompok penasihat strategi dan teknis WHO untuk bahaya infeksi. 
    Baca juga: WHO Bisa Saja Cabut Status Pandemi Lebih Cepat di Negara Ini, Asalkan Dia melanjutkan, saat ini dunia sangat berharap adanya herd immunity.
    Entah bagaimana banyak yang percaya, jika banyak orang yang kebal terhadap virus maka angka penularan akan menurun. Heymann yang juga seoranga ahli epidemiologi di London School of Hygiene and Tropical Medicine mengatakan, konsep herd immunity disalahpahami. 
    "Tampaknya takdir (virus corona) SARS-CoV-2 penyebab Covid-19 akan menjadi endemik, seperti halnya 4 virus corona lain yang menginfeksi manusia. Virus akan terus bermutasi saat berkembang biak di sel manusia," imbuhnya seperti dilansir Guardian, 29 Desember 2020. “Kita hidup dalam masyarakat global yang semakin kompleks. Ancaman ini akan terus berlanjut. 
    Jika ada satu hal yang perlu kita pelajari dari pandemi ini, dengan semua tragedi dan kehilangan,kita perlu bertindak bersama. Kita perlu melakukan tindakan yang lebih baik setiap hari.” Kepala ilmuwan WHO, Dr Soumya Swaminathan menambahkan, pelaksanaan vaksinasi Covid-19 tidak berarti menghentikan protokol kesehatan seperti jaga jarak, mencuci tangan, memakai masker, dan menghindari kerumunan di masa depan. 
    Swaminathan berkata, peran pertama dari vaksin adalah untuk mencegah penyakit simptomatik, penyakit parah, dan kematian. Apakah vaksin juga akan mengurangi jumlah infeksi atau mencegah orang menularkan virus, pertanyaan ini masih harus dikaji. 
    Baca juga: Hanya 5 Provinsi yang Bisa Selesai Vaksinasi Covid-19 dalam Setahun "Saya tidak percaya kami memiliki bukti bahwa vaksin apapun dapat mencegah seseorang benar-benar terinfeksi dan karena itu masih dapat menularkannya,” kata Swaminathan. 
    "Jadi, kita perlu berasumsi bahwa orang yang telah divaksinasi juga perlu melakukan tindakan pencegahan yang sama." Di kesempatan yang sama, Direktur jenderal WHO, Tedros Adhanom Ghebreyesus mengatakan bahwa tahun ini kita akan melihat tantangan baru dari Covid-19. Misalnya, varian baru Covid-19 dan tantangan membantu orang yang lelah dengan pandemi.

    Artikel ini telah tayang di Kompas.com dengan judul "WHO Peringatkan, Pandemi Covid-19 Kemungkinan Besar Bakal Jadi Endemik", Klik untuk baca: https://www.kompas.com/sains/read/2021/02/28/170200423/who-peringatkan-pandemi-covid-19-kemungkinan-besar-bakal-jadi-endemik?page=all#page2.
    Penulis : Gloria Setyvani Putri
    Editor : Gloria Setyvani Putri

    Download aplikasi Kompas.com untuk akses berita lebih mudah dan cepat:
    Android: https://bit.ly/3g85pkA
    iOS: https://apple.co/3hXWJ0L'''

text2 = """
<title>Menyelami Isi Pikiran Penganut Konspirasi Anti-COVID & Anti-Vaksin</title>
tirto.id - Seorang tokoh terpandang di satu perkampungan Kedoya Selatan, Jakarta Barat, menyangkal kehadiran SARS-CoV-2, virus penyebab COVID-19, telah menjangkiti dunia. Sampai pandemi sudah berjalan setahun terakhir, pria berusia 53 tahun ini masih meyakini COVID-19 “sama saja dengan flu biasa”. Ia menyalahkan orang-orang mempercayai virus ini yang “responsnya berlebihan banget.”

“Tutup warung, lah. Usaha, lah. Jadinya malah kesulitan,” keluhnya, yang menyambut ramah kedatangan saya pada pekan ketiga Februari lalu. Tak sulit menemuinya. Rumah lantai dua miliknya berdiri mencolok bercat merah muda. Warga sekitar melintasi depan rumah menyapanya dengan panggilan ‘Pak Haji’.

“Kalau enggak di rumah,” katanya membuka obrolan, “saya ke gudang dekat sini buat ngecek-ngecek.”

Warga menghormatinya bukan hanya karena dia pernah ke Mekkah, tapi juga dia pengusaha garmen. Bisnis ini telah digelutinya sejak 15 tahun lalu; dia punya satu gudang dan puluhan pekerja dari lingkungan dekat rumahnya.

Bisnis ini harusnya lancar, tapi pandemi COVID-19 telah mengubah peruntungannya sebagaimana juga membuat kalang kabut hajat hidup banyak orang. Usahanya kolaps; dia terpaksa merumahkan setengah pekerjanya.

“Untungnya sekarang bisnis sudah pelan-pelan membaik walaupun masih terbatas,” kata pria asal Cirebon ini. “Pekerja sudah saya tarik kembali ke gudang.”

Baca juga: Sulitnya Menjadi Ibu Pekerja Selama Pandemi COVID-19

Saya lega mendengar dia bercerita soal usahanya mulai perlahan bangkit, tapi masih tertegun atas keteguhannya menolak keberadaan COVID-19.

“Kayaknya memang ada permainan, enggak tahu tujuannya apa, di belakang pandemi ini? Kemarin itu ada berita korupsi Bansos, kan? Yang rugi akhirnya orang-orang kecil,” katanya, yang memilih emoh memakai masker selama kami berbincang.

Saya mungkin menangkap maksudnya. Korupsi bantuan sosial yang dilakukan Menteri Sosial Juliari Batubara, politikus dari PDIP, bagian dari “permainan” elite politik yang memakai alasan pandemi COVID-19 untuk ngutil duit negara. Tapi, virus ini memang ada; lebih dari satu juta orang Indonesia terjangkit; lebih dar 33 ribu orang meninggal; layanan rumah sakit nyaris kolaps. Para pekerja kesehatan mengalami tekanan psikologis dan kerja berat dan kelelahan. Dan korupsi, tanpa ada COVID-19 sekalipun, adalah problem utama Indonesia.


Namun, orang yang punya keyakinan sama dengan ‘Pak Haji’ ini tak sedikit. Saya bertemu Sigit, namanya minta disamarkan, teknisi bengkel berumur 25 tahun di bilangan Jatinegara, Jakarta Timur. Ia tak percaya COVID-19 sejak awal virus ini muncul yang bikin merah seluruh Indonesia. Ia menyebut “COVID-19 sebetulnya kayak sakit biasa.” Ia berkata orang yang takut terhadap virus ini “lebay”.

“Ada yang jauh lebih mengerikan kayak kanker, serangan jantung, atau yang lain,” katanya.

Ia mencontohkan kasus-kasus yang memperkuat keyakinannya, “Kan ada, tuh, yang nggak bergejala dan akhirnya bisa sembuh. Itu bukti juga kalau aslinya COVID-19 ini sama kayak penyakit-penyakit masuk angin. Dan selain itu, yang rawan kena juga orang-orang berumur tua.” (Penyingkapan: Orang-orang tua memang rentan terkena COVID-19, tapi virus ini menyerang semua usia. Kasus COVID-19 pada anak-anak di Indonesia termasuk tertinggi di Asia Tenggara.)

“Yang penting, menurut saya, makan yang sehat dan istirahat yang cukup,” ucapnya percaya diri.

Dasar argumen Sigit ditopang dari “pengamatannya sendiri” dan informasi dari media sosial maupun grup WhatsApp. Ia menyebut beberapa forum percakapan yang jadi rujukannya mengenai apa yang disebutnya “segala hal yang berhubungan dengan COVID-19.”

Dalam salah satu grup WhatsApp yang diikuti Sigit beranggotakan 15 orang, setiap hari setidaknya ada satu informasi memuat narasi senada: menolak percaya COVID-19. Contoh informasi ini misalnya penjelasan dari satu laman blog yang menyatakan virus COVID-19 sengaja dibikin pemerintah Cina melalui laboratorium penelitian di Wuhan.

“Saya rasa itu benar,” kata Sigit kepada saya. “Karena sekarang belum ketemu, kan, penyebabnya apa? Jangan-jangan memang disengaja saja buat bikin panik banyak orang.” (Penyingkapan: Sampai kini Badan Kesehatan Dunia masih menyelidiki asal-usul virus corona termasuk dengan mendatangi Wuhan; temuan definitif diyakini bisa tersingkap dalam beberapa pekan bahkan bulan ke depan.)

Meyakini COVID-19 sebagai Hoaks Bagian dari Krisis Pandemi
Mereka yang menyangkal COVID-19 dan lebih memilih menyadarkan pandangannya pada teori konspirasi adalah bagian dari perjalanan krisis pandemi di Indonesia, menurut Ismail Fahmi, pendiri Media Kernels Indonesia dan penggagas aplikasi Drone Emprit.

“Masyarakat yang bingung mau mencari informasi yang mana [soal COVID-19] itu akhirnya mendapatkan keyakinannya di teori konspirasi. Karena, pada dasarnya, di situasi krisis, orang butuh pegangan dan, dalam konteks pandemi maupun kebingungan itu, teori konspirasi mampu “hadir” untuk mereka,” kata Fahmi.

Narasi bahwa COVID-19 adalah konspirasi muncul sejak kemunculan virus ini, bersamaan dengan pola komunikasi publik pemerintah Indonesia yang cenderung meremehkan keberadaan virus tersebut. Misalnya, narasi ini menyebut COVID-19 adalah kongkalikong “elite global”. Para menteri pemerintahan Jokowi juga menyepelekan komunikasi krisis. Anda mungkin masih ingat pernyataan Menteri Kesehatan Terawan soal “kematian efek flu lebih tinggi dari corona.” Ingat pula Menteri Luhut Pandjaitan yang bilang “virus corona tidak tahan cuaca panas.” Juga Menteri Pertanian Syahrul Yasin Limpo yang mengenalkan ‘kalung anti corona.’

Komunikasi buruk juga penanganan amburadul oleh pemerintah sangat mungkin menambah gelembung keyakinan para penganut anti-COVID-19.

Baca juga:
Benarkah Klaim Luhut Bahwa Corona Tak Kuat Bertahan di Cuaca Panas?
Kalung 'Anti Virus Corona' Kementan yang Menyesatkan
Benarkah Flu Musiman Lebih Mematikan dibandingkan COVID-19?

Yerikho Setyo Adi dari tim analisis sentimen twitter dari LaporCovid19, koalisi warga pemantau pandemi COVID-19, mengatakan arus teori konspirasi bertebaran di media sosial, dari Facebook hingga Twitter, dari YouTube hingga Instagram.

Ada beberapa kriteria yang menggambarkan kondisi penyebaran teori konspirasi itu, menurut Yerikho.

Di Instagram, misalnya, ada dua pola. Pola umum memang ada akun khusus yang dibikin untuk teori konspirasi. Ia mencontohkan akun bernama @teluuur, “yang punya nuance anti-pemerintah, memakai COVID-19 untuk menyerang pemerintah.”

Pola kedua, teori konspirasi turut disebar oleh para macro-influencer. Nama-namanya macam Rina Nose, Anji, dan Jerinx. (Jerinx dipidana UU ITE untuk kasus menyebut IDI “kacung WHO.” Redaksi Tirto menolak penggunaan pasal karet UU ITE terhadap Jerinx.)

“Influencer biasanya menggunakan literatur lain buat menegasi adanya COVID-19,” ujar Yerikho.

Di Twitter, pertarungan dan penyebaran teori konspirasi mengenai COVID-19 tak kalah sengit, tapi susah dipetakan karena diperkeruh dengan keterlibatan para buzzer. Para pendengung ini bukan pertama-tama menilai COVID-19 dari sisi kesehatan, tapi sebagai kendaraan buat membela dan menyerang pemerintahan Jokowi.

Baca juga: Kenapa Ada Banyak Orang yang Percaya Teori Konspirasi?

Infografik HL Indepth Antivaksin

Medan Pertempuran Baru dan Lawas: Vaksinasi
Ada yang menyebut pengguna Facebook adalah orang-orang tua, kaum Boomers. Media yang bikin kaya Mark Zuckerberg ini disoroti, salah satunya, ikut menyuburkan bisnis kebencian dan polarisasi. Saya membuat akun baru di Facebook untuk jadi anggota grup Flat Earth Indonesia.

Saya mesti mengisi formulir pertanyaan; ada tiga poin, masing-masing menguji pemahaman sekaligus kepercayaan calon anggota akan teori Bumi Datar. Percobaan saya gagal. Saya akhirnya meminta rekan satu kantor untuk mendaftar ke grup ini. Dengan tampilan akun lebih meyakinkan, persetujuan bergabung berjalan mulus.

Melalui akun pinjaman itu, cukup mudah menemukan beragam unggahan anti-vaksin COVID-19. Dalam rentang Desember 2020 hingga Februari 2021, atau sejalan kabar distribusi vaksin segera dilakukan pemerintah, ada puluhan unggahan bernada serupa, yakni menolak vaksin COVID-19.

Satu akun menyebut “di dalam vaksin ada cip yang ditanam dan dapat merusak fungsi organ tubuh.” Yang lain menulis “vaksin menciptakan efek samping sangat buruk selepas disuntik.” Sisanya percaya “vaksin adalah cara negara asing menguasai kedaulatan dalam negeri.”

Setiap unggahan anti-vaksin dalam grup ini disambut positif. Apa yang diutarakan seketika dibenarkan, tanpa menggunakan daya nalar apalagi proses verifikasi mengenai sumber rujukan informasi tersebut.

Screenshot Tolak Vaksin Corona


“Para pendukung teori konspirasi, termasuk anti-vaksin, dalam menyampaikan pikirannya itu bayarannya kepuasan,” kata Ismail Fahmi dari Drone Emprit.

“Mereka akan puas, secara psikologis, ketika apa yang diomongkan bisa menarik banyak orang. Ini beda dengan, katakanlah, buzzer yang imbalannya adalah materi.”

Kelompok anti-vaksin tak lahir dalam satu malam; jauh sebelum pandemi COVID-19.

Pada 1998, Lancet, jurnal kedokteran prestisius, mempublikasikan penelitian oleh dokter bernama Andrew Wakefield. Bersama 13 peneliti lain, Wakefield menduga vaksin cacar, gondok, dan rubella (MMR) bisa menyebabkan autisme.

Dunia heboh. Temuan kontroversial Wakefield membuat sentimen anti-vaksin meroket tajam. Dari Inggris, AS, hingga Nigeria, banyak orang menolak kehadiran vaksin.

Penelitian Wakefield terbukti cacat di kemudian hari dan Lancet terpaksa menanggung malu. Kendati begitu, fakta ini nyatanya tak dapat meredam histeria anti-vaksin yang kadung meluas.

Dasar argumennya punya pakem permanen. Mereka yang menentang vaksin senantiasa menganggap vaksin berkorelasi kuat dengan autisme. Yang lain percaya vaksin dibikin dengan darah babi sehingga haram bagi umat Islam. Ada pula yang berpikir vaksin adalah produk konspirasi Yahudi.

Baca juga:
Agama dan Media Sosial: Penyebab Orang Jadi Anti-vaksin?
Sesat Pikir Teori Konspirasi Deddy, Young Lex, dan Jerinx

Kemunculan media sosial memperluas jangkauan dan resonansi penolakan vaksin. Dalam riset berjudul “The Overlooked Dangers of Anti-vaccination Groups’ Social Media Presence” (2017), Ayelet Evrony dan Arthur Caplan menjelaskan kelompok-kelompok anti-vaksin bermunculan dan melancarkan propagandanya di Facebook.

Salah satunya bernama ‘A Voice for Choice’, bermarkas di California, AS. Misi organisasi ini mendukung hak-hak masyarakat untuk memperoleh informasi lengkap terhadap produk farmasi. Implementasinya, mengajak masyarakat menjauhi vaksin.

Namun, pesan-pesan yang disampaikan A Voice for Choice menyesatkan alih-alih informatif. Mereka memakai jurus lama: mereproduksi narasi ampas seolah-olah sebuah “teori”, sama sekali tanpa referensi ilmiah yang kokoh, demi membenarkan klaimnya. Kalaupun “teori” ini seakan didukung bukti dan data, biasanya mengambil dari penelitian yang sama-sama anti-vaksin sekaligus sulit dipertanggungjawabkan kebenarannya.

Contohnya, kelompok ini menyatakan “jarang ada anak-anak yang bisa lepas dari efek samping vaksin yang berbahaya dan beracun.” Konteks “berbahaya” merujuk hubungan vaksin dengan kanker, penyakit autoimun, kejang, dan ... alergi kacang!

Kehadiran A Voice for Choice menimbulkan ketakutan juga menarik dukungan ribuan orang. “Mereka adalah contoh bagaimana kelompok anti-vaksin dapat memanfaatkan kekuatan media sosial untuk menebar propaganda yang bisa menimbulkan rasa takut,” tulis Evrony dan Caplan.

Di Indonesia, mereka yang percaya vaksin cuma mendatangkan keburukan juga memakai nalar yang bengkok. Saya menemukan salah satunya dalam situs bernama 'mbakYuTube' yang isinya bermacam teori konspirasi.

Situs ini dirancang rapi, memuat beberapa konten, dari forum, berita, hingga video. Setiap konten didesain mencolok dengan bahasa bombastis, misalnya unggahan video berjudul, “Masih Mau Dipasang Microchip?”

Screenshot Mbak Yutub


Pembuat mbakYuTube telah mendeklarasikan sikap terang: “Teori konspirasi adalah istilah hinaan yang dibuat oleh para koruptor agar kejahatannya tidak terbongkar.”

“Mereka ini enggak ragu bikin konten secara niat. Biasanya, mereka ambil potongan-potongan fakta yang enggak relevan untuk mendukung argumennya. Ketika apa yang mereka sampaikan mendapati pertentangan, mereka akan selalu muncul dengan teori-teori baru,” Fahmi menjelaskan.

'Komunikasi Pemerintah Harus Berpijak pada Sains'
Riset berjudul “Social Media and Vaccine Hesitancy” (British Medical Journal) yang disusun Steven Lloyd dan Charles Wiysonge menjelaskan informasi keblinger ihwal vaksin bisa menurunkan cakupan vaksinasi. Dengan kata lain, peluang mengakhiri pandemi bisa tersendat akibat menurunnya partisipasi program vaksinasi.

Kementerian Kesehatan dan Komite Penasihat Ahli Imunisasi Nasional pernah bikin survei soal vaksinasi pada September 2020. Survei dilakukan terhadap lebih dari 115 ribu responden di 34 provinsi dan 508 kabupaten/ kota. Hasilnya, sekitar 65 persen responden bersedia menerima vaksin COVID-19 jika disediakan pemerintah; 8 persen menolak dan 27 persen menyatakan ragu atas rencana pemerintah mendistribusikan vaksin COVID-19.

Juru bicara Komite Penanganan COVID-19 dan Pemulihan Ekonomi Nasional, Wiku Adisasmito, berupaya meyakinkan bahwa vaksin COVID-19 terhitung aman dan halal.

“Vaksinasi bukan hanya terkait kekebalan individu, tapi juga kekebalan komunitas. Jika kita ikut serta menyukseskan program vaksin, sama saja kita membela negara, berjuang dalam pandemi COVID-19,” ujarnya kepada saya.

“Pemerintah akan memprioritaskan upaya persuasif. Namun, jika menghambat proses pencapaian herd immunity secara signifikan, tindakan yang dijabarkan dalam Perpres No.14 Tahun 2021 [akan diambil],” imbuhnya.

Mungkin di situ juga letak masalahnya. Aturan itu menyebut partisipasi program vaksin adalah kewajiban bagi mereka yang telah ditetapkan sebagai penerima vaksin. Jika menolak disuntik, akan diberi sanksi dari pemberian denda hingga pencabutan bantuan sosial.

Baca juga:
Bagaimana Gerakan Anti-vaksin Mendunia?
Histeria Anti-Vaksin: Agamawan Menyemai, Ilmuwan Memulai
Konten Antivaksin Bisa Hambat Vaksinasi COVID-19 di Indonesia

Teguh Aprianto, co-founder Komunitas Ethical Hacker Indonesia, menilai pendekatan pemerintah mestinya melawan balik dengan narasi maupun informasi yang jelas dan mudah dipahami soal vaksinasi, bukan mengedepankan sanksi atau hukuman.

“Kuncinya ada pada informasi lawan informasi. Masyarakat yang konspiratif, sesungguhnya, jangan selalu disalahkan karena pemicunya enggak tunggal. Ada juga faktor pemerintah yang ikut menanam benih-benih konspirasi,” terang Teguh.

Irma Hidayana, Koordinator LaporCovid19, menilai lahirnya kelompok anti-vaksin COVID-19 disebabkan juga faktor ketidakseriusan pemerintah menangani pandemi. Pemerintah justru membangun narasi tanpa berpijak pada sains, ujarnya.

“Padahal yang dihadapi itu nyata, ada hubungannya dengan ilmu pengetahuan dan kesehatan publik,” kata Irma.

Terhadap kelompok anti-vaksin, Irma menganjurkan pemerintah mestinya menggencarkan edukasi perihal vaksinasi sekaligus pandemi. Informasinya harus yang benar dan disusun dengan materi sesederhana mungkin agar penyampaiannya dapat menyeluruh ke lapisan masyarakat.

“Selain juga, tentunya, menyampaikan komunikasi risiko: soal side effect vaksin hingga akan seperti apa jadinya bila vaksin tidak dimanfaatkan,” tambahnya. “Memang sudah terlambat, tapi setidaknya kita jangan sampai kehilangan harapan. Semua bisa dilakukan selama ada political will dari pemerintah.”

Saya mengingat pertanyaan terakhir dengan ‘Pak Haji’ dari Kedoya Selatan. “Kalau Bapak sendiri yang kena COVID, semoga enggak begitu, apakah Bapak akan percaya bahwa COVID-19 nyata? Dan vaksin bisa jadi salah satu cara buat mengendalikan itu?”

Ia diam sejenak, lalu menjawab, “Kalau memang akhirnya sakit, itu kembali kepada kehendak Tuhan. Manusia tak bisa mengubah takdir.”

Saya tertegun. Mungkin tak ada yang mustahil untuk mengubah keyakinan para penganut konspirasi anti-COVID-19 dan anti-vaksin, sementara pada saat yang sama kita terus beradu nasib dengan virus ini dan ancaman kematian, di tengah krisis kepercayaan atas inkompetensi pemerintah menangani pandemi selama setahun terakhir dan entah sampai kapan.

Baca juga artikel terkait VAKSINASI COVID-19 atau tulisan menarik lainnya Faisal Irfani
(tirto.id - Indepth)
"""

document1 = text_preprocessing(text)
document2 = text_preprocessing(text2)
print(document1)
print(document2)

corpus = dict(**document1, **document2)
unique_words = []
for document in corpus:
  for word in corpus[document]:
    if word not in unique_words:
      unique_words.append(word)
print(unique_words)

number_of_words_doc1 = dict.fromkeys(unique_words, 0)
for doc in document1.values():
  for word in doc:
    number_of_words_doc1[word] += 1
number_of_words_doc2 = dict.fromkeys(unique_words, 0)
for doc in document2.values():
  for word in doc:
    number_of_words_doc2[word] += 1

print(number_of_words_doc1)
print(number_of_words_doc2)

tfdict1 = term_frequency(number_of_words_doc1, document1.values())
tfdict2 = term_frequency(number_of_words_doc2, document2.values())
print(tfdict1)
print(tfdict2)

idf = computeIDF([number_of_words_doc1, number_of_words_doc2])
print(idf)

tf_idf_doc1 = computeTFIDF(tfdict1, idf)
tf_idf_doc2 = computeTFIDF(tfdict2, idf)
print(tf_idf_doc1)
print(tf_idf_doc2)